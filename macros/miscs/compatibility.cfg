[gcode_macro M117]
rename_existing: M117.1
description: Override M117 command with rawparams
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}



[gcode_macro M125]
description: Map M125 to PARK
gcode:
    PARK {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro M204]
description: Map M204 to SET_VELOCITY_LIMIT for ACCEL
rename_existing: M666.204
gcode:
  # {% if printer['gcode_macro Qmode'].flag|int == 0 %}
  {% set get_params = "" %}
  {% if 'S' in params|upper %}
    {% set get_params = (get_params + ' ' + 'S' + params.S) %}
  {% endif %}
  {% if 'P' in params|upper %}
    {% set get_params = (get_params + ' ' + 'P' + params.P) %}
  {% endif %}
  {% if 'T' in params|upper %}
    {% set get_params = (get_params + ' ' + 'T' + params.T) %}
  {% endif %}
  M666.204 {get_params}
  # {% endif %}

[gcode_macro M205]
description: Map M205 to SET_VELOCITY_LIMIT for SQUARE_CORNER_VELOCITY
gcode:
    {% if 'X' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
    {% elif 'Y' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
    {% endif %}

[gcode_macro M486]
description: Map object transform
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


[gcode_macro M600]
description: Map M600 to CHANGE_FILAMENT
gcode:
    CHANGE_FILAMENT

[gcode_macro M701]
description: Map M701 to LOAD_FILAMENT
gcode:
    LOAD_FILAMENT

[gcode_macro M702]
description: Map M702 to UNLOAD_FILAMENT
gcode:
    UNLOAD_FILAMENT

[gcode_macro M808]
description: 'Marlin' style M808 compatibility macro for SDCard looping
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

[gcode_macro M900]
description: Map M900 to SET_PRESSURE_ADVANCE
gcode:
    {% if 'K' in params %}
        {% if 'E' in params %}
            SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
        {% else %}
            SET_PRESSURE_ADVANCE ADVANCE={params.K}
        {% endif %}
    {% endif %}

[gcode_macro G00]
gcode:  
    G0 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G01]
gcode: 
    G1 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G02]
gcode: 
    G2 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G03]
gcode: 
    G2 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G04]
gcode: 
    G4 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}